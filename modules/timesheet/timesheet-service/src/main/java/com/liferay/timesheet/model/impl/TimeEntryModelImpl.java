/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.timesheet.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.timesheet.model.TimeEntry;
import com.liferay.timesheet.model.TimeEntryModel;
import com.liferay.timesheet.model.TimeEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimeEntry service. Represents a row in the &quot;TIME_TimeEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TimeEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimeEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TimeEntryImpl
 * @see TimeEntry
 * @see TimeEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TimeEntryModelImpl extends BaseModelImpl<TimeEntry>
	implements TimeEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a time entry model instance should use the {@link TimeEntry} interface instead.
	 */
	public static final String TABLE_NAME = "TIME_TimeEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timeEntryId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "hours", Types.DOUBLE },
			{ "projectId", Types.BIGINT },
			{ "taskId", Types.BIGINT },
			{ "billable", Types.BOOLEAN },
			{ "timesheetId", Types.BIGINT },
			{ "onDate", Types.TIMESTAMP },
			{ "msg_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("timeEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hours", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("billable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("timesheetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("onDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("msg_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table TIME_TimeEntry (timeEntryId LONG not null primary key,userId LONG,hours DOUBLE,projectId LONG,taskId LONG,billable BOOLEAN,timesheetId LONG,onDate DATE null,msg_ STRING null)";
	public static final String TABLE_SQL_DROP = "drop table TIME_TimeEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY timeEntry.userId ASC, timeEntry.onDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TIME_TimeEntry.userId ASC, TIME_TimeEntry.onDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.timesheet.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.timesheet.model.TimeEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.timesheet.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.timesheet.model.TimeEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.timesheet.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.timesheet.model.TimeEntry"),
			true);
	public static final long ONDATE_COLUMN_BITMASK = 1L;
	public static final long TIMESHEETID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimeEntry toModel(TimeEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimeEntry model = new TimeEntryImpl();

		model.setTimeEntryId(soapModel.getTimeEntryId());
		model.setUserId(soapModel.getUserId());
		model.setHours(soapModel.getHours());
		model.setProjectId(soapModel.getProjectId());
		model.setTaskId(soapModel.getTaskId());
		model.setBillable(soapModel.getBillable());
		model.setTimesheetId(soapModel.getTimesheetId());
		model.setOnDate(soapModel.getOnDate());
		model.setMessage(soapModel.getMessage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimeEntry> toModels(TimeEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimeEntry> models = new ArrayList<TimeEntry>(soapModels.length);

		for (TimeEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.timesheet.service.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.timesheet.model.TimeEntry"));

	public TimeEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _timeEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTimeEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timeEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TimeEntry.class;
	}

	@Override
	public String getModelClassName() {
		return TimeEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timeEntryId", getTimeEntryId());
		attributes.put("userId", getUserId());
		attributes.put("hours", getHours());
		attributes.put("projectId", getProjectId());
		attributes.put("taskId", getTaskId());
		attributes.put("billable", getBillable());
		attributes.put("timesheetId", getTimesheetId());
		attributes.put("onDate", getOnDate());
		attributes.put("message", getMessage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long timeEntryId = (Long)attributes.get("timeEntryId");

		if (timeEntryId != null) {
			setTimeEntryId(timeEntryId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Double hours = (Double)attributes.get("hours");

		if (hours != null) {
			setHours(hours);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		Boolean billable = (Boolean)attributes.get("billable");

		if (billable != null) {
			setBillable(billable);
		}

		Long timesheetId = (Long)attributes.get("timesheetId");

		if (timesheetId != null) {
			setTimesheetId(timesheetId);
		}

		Date onDate = (Date)attributes.get("onDate");

		if (onDate != null) {
			setOnDate(onDate);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}
	}

	@JSON
	@Override
	public long getTimeEntryId() {
		return _timeEntryId;
	}

	@Override
	public void setTimeEntryId(long timeEntryId) {
		_timeEntryId = timeEntryId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask = -1L;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Double getHours() {
		return _hours;
	}

	@Override
	public void setHours(Double hours) {
		_hours = hours;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	@Override
	public boolean getBillable() {
		return _billable;
	}

	@JSON
	@Override
	public boolean isBillable() {
		return _billable;
	}

	@Override
	public void setBillable(boolean billable) {
		_billable = billable;
	}

	@JSON
	@Override
	public long getTimesheetId() {
		return _timesheetId;
	}

	@Override
	public void setTimesheetId(long timesheetId) {
		_columnBitmask |= TIMESHEETID_COLUMN_BITMASK;

		if (!_setOriginalTimesheetId) {
			_setOriginalTimesheetId = true;

			_originalTimesheetId = _timesheetId;
		}

		_timesheetId = timesheetId;
	}

	public long getOriginalTimesheetId() {
		return _originalTimesheetId;
	}

	@JSON
	@Override
	public Date getOnDate() {
		return _onDate;
	}

	@Override
	public void setOnDate(Date onDate) {
		_columnBitmask = -1L;

		if (_originalOnDate == null) {
			_originalOnDate = _onDate;
		}

		_onDate = onDate;
	}

	public Date getOriginalOnDate() {
		return _originalOnDate;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TimeEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TimeEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TimeEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimeEntryImpl timeEntryImpl = new TimeEntryImpl();

		timeEntryImpl.setTimeEntryId(getTimeEntryId());
		timeEntryImpl.setUserId(getUserId());
		timeEntryImpl.setHours(getHours());
		timeEntryImpl.setProjectId(getProjectId());
		timeEntryImpl.setTaskId(getTaskId());
		timeEntryImpl.setBillable(getBillable());
		timeEntryImpl.setTimesheetId(getTimesheetId());
		timeEntryImpl.setOnDate(getOnDate());
		timeEntryImpl.setMessage(getMessage());

		timeEntryImpl.resetOriginalValues();

		return timeEntryImpl;
	}

	@Override
	public int compareTo(TimeEntry timeEntry) {
		int value = 0;

		if (getUserId() < timeEntry.getUserId()) {
			value = -1;
		}
		else if (getUserId() > timeEntry.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getOnDate(), timeEntry.getOnDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TimeEntry)) {
			return false;
		}

		TimeEntry timeEntry = (TimeEntry)obj;

		long primaryKey = timeEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TimeEntryModelImpl timeEntryModelImpl = this;

		timeEntryModelImpl._originalUserId = timeEntryModelImpl._userId;

		timeEntryModelImpl._setOriginalUserId = false;

		timeEntryModelImpl._originalTimesheetId = timeEntryModelImpl._timesheetId;

		timeEntryModelImpl._setOriginalTimesheetId = false;

		timeEntryModelImpl._originalOnDate = timeEntryModelImpl._onDate;

		timeEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TimeEntry> toCacheModel() {
		TimeEntryCacheModel timeEntryCacheModel = new TimeEntryCacheModel();

		timeEntryCacheModel.timeEntryId = getTimeEntryId();

		timeEntryCacheModel.userId = getUserId();

		timeEntryCacheModel.hours = getHours();

		timeEntryCacheModel.projectId = getProjectId();

		timeEntryCacheModel.taskId = getTaskId();

		timeEntryCacheModel.billable = getBillable();

		timeEntryCacheModel.timesheetId = getTimesheetId();

		Date onDate = getOnDate();

		if (onDate != null) {
			timeEntryCacheModel.onDate = onDate.getTime();
		}
		else {
			timeEntryCacheModel.onDate = Long.MIN_VALUE;
		}

		timeEntryCacheModel.message = getMessage();

		String message = timeEntryCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			timeEntryCacheModel.message = null;
		}

		return timeEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{timeEntryId=");
		sb.append(getTimeEntryId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", hours=");
		sb.append(getHours());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", taskId=");
		sb.append(getTaskId());
		sb.append(", billable=");
		sb.append(getBillable());
		sb.append(", timesheetId=");
		sb.append(getTimesheetId());
		sb.append(", onDate=");
		sb.append(getOnDate());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.liferay.timesheet.model.TimeEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timeEntryId</column-name><column-value><![CDATA[");
		sb.append(getTimeEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hours</column-name><column-value><![CDATA[");
		sb.append(getHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billable</column-name><column-value><![CDATA[");
		sb.append(getBillable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timesheetId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onDate</column-name><column-value><![CDATA[");
		sb.append(getOnDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TimeEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TimeEntry.class
		};
	private long _timeEntryId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Double _hours;
	private long _projectId;
	private long _taskId;
	private boolean _billable;
	private long _timesheetId;
	private long _originalTimesheetId;
	private boolean _setOriginalTimesheetId;
	private Date _onDate;
	private Date _originalOnDate;
	private String _message;
	private long _columnBitmask;
	private TimeEntry _escapedModel;
}