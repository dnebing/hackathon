/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.timesheet.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.timesheet.model.Timesheet;
import com.liferay.timesheet.model.TimesheetModel;
import com.liferay.timesheet.model.TimesheetSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Timesheet service. Represents a row in the &quot;TIME_Timesheet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TimesheetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimesheetImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TimesheetImpl
 * @see Timesheet
 * @see TimesheetModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TimesheetModelImpl extends BaseModelImpl<Timesheet>
	implements TimesheetModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a timesheet model instance should use the {@link Timesheet} interface instead.
	 */
	public static final String TABLE_NAME = "TIME_Timesheet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timesheetId", Types.BIGINT },
			{ "dateFrom", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "dateTo", Types.TIMESTAMP },
			{ "approved", Types.BOOLEAN },
			{ "open_", Types.BOOLEAN },
			{ "submittedOn", Types.TIMESTAMP },
			{ "approvedOn", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("timesheetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("open_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("submittedOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedOn", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table TIME_Timesheet (timesheetId LONG not null primary key,dateFrom DATE null,userId LONG,dateTo DATE null,approved BOOLEAN,open_ BOOLEAN,submittedOn DATE null,approvedOn DATE null)";
	public static final String TABLE_SQL_DROP = "drop table TIME_Timesheet";
	public static final String ORDER_BY_JPQL = " ORDER BY timesheet.timesheetId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TIME_Timesheet.timesheetId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.timesheet.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.timesheet.model.Timesheet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.timesheet.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.timesheet.model.Timesheet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.timesheet.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.timesheet.model.Timesheet"),
			true);
	public static final long OPEN_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long TIMESHEETID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Timesheet toModel(TimesheetSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Timesheet model = new TimesheetImpl();

		model.setTimesheetId(soapModel.getTimesheetId());
		model.setDateFrom(soapModel.getDateFrom());
		model.setUserId(soapModel.getUserId());
		model.setDateTo(soapModel.getDateTo());
		model.setApproved(soapModel.getApproved());
		model.setOpen(soapModel.getOpen());
		model.setSubmittedOn(soapModel.getSubmittedOn());
		model.setApprovedOn(soapModel.getApprovedOn());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Timesheet> toModels(TimesheetSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Timesheet> models = new ArrayList<Timesheet>(soapModels.length);

		for (TimesheetSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.timesheet.service.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.timesheet.model.Timesheet"));

	public TimesheetModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _timesheetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTimesheetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timesheetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Timesheet.class;
	}

	@Override
	public String getModelClassName() {
		return Timesheet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timesheetId", getTimesheetId());
		attributes.put("dateFrom", getDateFrom());
		attributes.put("userId", getUserId());
		attributes.put("dateTo", getDateTo());
		attributes.put("approved", getApproved());
		attributes.put("open", getOpen());
		attributes.put("submittedOn", getSubmittedOn());
		attributes.put("approvedOn", getApprovedOn());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long timesheetId = (Long)attributes.get("timesheetId");

		if (timesheetId != null) {
			setTimesheetId(timesheetId);
		}

		Date dateFrom = (Date)attributes.get("dateFrom");

		if (dateFrom != null) {
			setDateFrom(dateFrom);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date dateTo = (Date)attributes.get("dateTo");

		if (dateTo != null) {
			setDateTo(dateTo);
		}

		Boolean approved = (Boolean)attributes.get("approved");

		if (approved != null) {
			setApproved(approved);
		}

		Boolean open = (Boolean)attributes.get("open");

		if (open != null) {
			setOpen(open);
		}

		Date submittedOn = (Date)attributes.get("submittedOn");

		if (submittedOn != null) {
			setSubmittedOn(submittedOn);
		}

		Date approvedOn = (Date)attributes.get("approvedOn");

		if (approvedOn != null) {
			setApprovedOn(approvedOn);
		}
	}

	@JSON
	@Override
	public long getTimesheetId() {
		return _timesheetId;
	}

	@Override
	public void setTimesheetId(long timesheetId) {
		_timesheetId = timesheetId;
	}

	@JSON
	@Override
	public Date getDateFrom() {
		return _dateFrom;
	}

	@Override
	public void setDateFrom(Date dateFrom) {
		_dateFrom = dateFrom;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getDateTo() {
		return _dateTo;
	}

	@Override
	public void setDateTo(Date dateTo) {
		_dateTo = dateTo;
	}

	@JSON
	@Override
	public boolean getApproved() {
		return _approved;
	}

	@JSON
	@Override
	public boolean isApproved() {
		return _approved;
	}

	@Override
	public void setApproved(boolean approved) {
		_approved = approved;
	}

	@JSON
	@Override
	public boolean getOpen() {
		return _open;
	}

	@JSON
	@Override
	public boolean isOpen() {
		return _open;
	}

	@Override
	public void setOpen(boolean open) {
		_columnBitmask |= OPEN_COLUMN_BITMASK;

		if (!_setOriginalOpen) {
			_setOriginalOpen = true;

			_originalOpen = _open;
		}

		_open = open;
	}

	public boolean getOriginalOpen() {
		return _originalOpen;
	}

	@JSON
	@Override
	public Date getSubmittedOn() {
		return _submittedOn;
	}

	@Override
	public void setSubmittedOn(Date submittedOn) {
		_submittedOn = submittedOn;
	}

	@JSON
	@Override
	public Date getApprovedOn() {
		return _approvedOn;
	}

	@Override
	public void setApprovedOn(Date approvedOn) {
		_approvedOn = approvedOn;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Timesheet.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Timesheet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Timesheet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimesheetImpl timesheetImpl = new TimesheetImpl();

		timesheetImpl.setTimesheetId(getTimesheetId());
		timesheetImpl.setDateFrom(getDateFrom());
		timesheetImpl.setUserId(getUserId());
		timesheetImpl.setDateTo(getDateTo());
		timesheetImpl.setApproved(getApproved());
		timesheetImpl.setOpen(getOpen());
		timesheetImpl.setSubmittedOn(getSubmittedOn());
		timesheetImpl.setApprovedOn(getApprovedOn());

		timesheetImpl.resetOriginalValues();

		return timesheetImpl;
	}

	@Override
	public int compareTo(Timesheet timesheet) {
		long primaryKey = timesheet.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Timesheet)) {
			return false;
		}

		Timesheet timesheet = (Timesheet)obj;

		long primaryKey = timesheet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TimesheetModelImpl timesheetModelImpl = this;

		timesheetModelImpl._originalUserId = timesheetModelImpl._userId;

		timesheetModelImpl._setOriginalUserId = false;

		timesheetModelImpl._originalOpen = timesheetModelImpl._open;

		timesheetModelImpl._setOriginalOpen = false;

		timesheetModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Timesheet> toCacheModel() {
		TimesheetCacheModel timesheetCacheModel = new TimesheetCacheModel();

		timesheetCacheModel.timesheetId = getTimesheetId();

		Date dateFrom = getDateFrom();

		if (dateFrom != null) {
			timesheetCacheModel.dateFrom = dateFrom.getTime();
		}
		else {
			timesheetCacheModel.dateFrom = Long.MIN_VALUE;
		}

		timesheetCacheModel.userId = getUserId();

		Date dateTo = getDateTo();

		if (dateTo != null) {
			timesheetCacheModel.dateTo = dateTo.getTime();
		}
		else {
			timesheetCacheModel.dateTo = Long.MIN_VALUE;
		}

		timesheetCacheModel.approved = getApproved();

		timesheetCacheModel.open = getOpen();

		Date submittedOn = getSubmittedOn();

		if (submittedOn != null) {
			timesheetCacheModel.submittedOn = submittedOn.getTime();
		}
		else {
			timesheetCacheModel.submittedOn = Long.MIN_VALUE;
		}

		Date approvedOn = getApprovedOn();

		if (approvedOn != null) {
			timesheetCacheModel.approvedOn = approvedOn.getTime();
		}
		else {
			timesheetCacheModel.approvedOn = Long.MIN_VALUE;
		}

		return timesheetCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{timesheetId=");
		sb.append(getTimesheetId());
		sb.append(", dateFrom=");
		sb.append(getDateFrom());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", dateTo=");
		sb.append(getDateTo());
		sb.append(", approved=");
		sb.append(getApproved());
		sb.append(", open=");
		sb.append(getOpen());
		sb.append(", submittedOn=");
		sb.append(getSubmittedOn());
		sb.append(", approvedOn=");
		sb.append(getApprovedOn());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.timesheet.model.Timesheet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timesheetId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateFrom</column-name><column-value><![CDATA[");
		sb.append(getDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateTo</column-name><column-value><![CDATA[");
		sb.append(getDateTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approved</column-name><column-value><![CDATA[");
		sb.append(getApproved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>open</column-name><column-value><![CDATA[");
		sb.append(getOpen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedOn</column-name><column-value><![CDATA[");
		sb.append(getSubmittedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedOn</column-name><column-value><![CDATA[");
		sb.append(getApprovedOn());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Timesheet.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Timesheet.class
		};
	private long _timesheetId;
	private Date _dateFrom;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _dateTo;
	private boolean _approved;
	private boolean _open;
	private boolean _originalOpen;
	private boolean _setOriginalOpen;
	private Date _submittedOn;
	private Date _approvedOn;
	private long _columnBitmask;
	private Timesheet _escapedModel;
}